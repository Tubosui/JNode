★Sample.javaの実行結果と備考
(改行は自分で(プログラムではなく)入れました)

//単純なJSON
{"あ行":"あいうえお","か行":"かきくけこ","さ行":"さしすせそ"}

//入れ子になってるJSON
{
  "ひらがな":{
              "あ行":"あいうえお",
　　　        "か行":"かきくけこ",
　　　        "さ行":"さしすせそ"
            },
  "カタカナ":{
              "ア行":"アイウエオ",
　　　        "カ行":"カキクケコ",
　　　        "サ行":"サシスセソ"
　　　       }
}

//様々な型が入ってるJSON
{
  "日本語":{
            "文字数":50,
　　        "文字":{
　　               "ひらがな":{
　　                           "あ行":"あいうえお",
　　　　　　　                 "か行":"かきくけこ",
　　　　　　　                 "さ行":"さしすせそ"
　　　　　　　                 },
　　　　            "カタカナ":{
　　　　                       "ア行":"アイウエオ",
　　　　　　　                 "カ行":"カキクケコ",
　　　　　　　                 "サ行":"サシスセソ"
　　　　　　　                 }
　　　　　　　     }
　　        },
  "英語(仮)":{
              "文字数":26,
　　　        "文字":["A","B","C","D","E","F","G","H"]
　　　       }
}


JNode
keyとvalueを保持、toString()で「key:value」の形式で返す。(2つ以外に次の要素の参照も保持)
→valueの型によって挙動を変化させることによって出力形式を変えている
　
　{key:value}　(valueがStringやInteger)
　{key:{key:value}}　(valueがJNodeHandler)
　{key:[v1,v2,v3]}　(valueがList)
  
JNodeHandler
JNodeのラッパークラス
片方向リストのような実装
最初と最後のJNodeを保持し、addメソッドによってJNodeを追加できる。
toString()によって最初のJNodeから順番に(JNodeの)toStringを呼び出し、その都度「,」を挿入

オブジェクトが入れ後になっているような場合でも再帰的にtoStringを呼び出すことによって対応可能
